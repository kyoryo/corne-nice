/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1400
#define MOVE_UP MOVE_Y(-ZMK_MOUSE_DEFAULT_MOVE_VAL)
#define MOVE_DOWN MOVE_Y(ZMK_MOUSE_DEFAULT_MOVE_VAL)
#define MOVE_LEFT MOVE_X(-ZMK_MOUSE_DEFAULT_MOVE_VAL)
#define MOVE_RIGHT MOVE_X(ZMK_MOUSE_DEFAULT_MOVE_VAL)
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 100

#undef SCRL_UP
#undef SCRL_DOWN
#undef SCRL_LEFT
#undef SCRL_RIGHT

#define SCRL_UP MOVE_Y(ZMK_MOUSE_DEFAULT_SCRL_VAL)
#define SCRL_DOWN MOVE_Y(-ZMK_MOUSE_DEFAULT_SCRL_VAL)
#define SCRL_LEFT MOVE_X(-ZMK_MOUSE_DEFAULT_SCRL_VAL)
#define SCRL_RIGHT MOVE_X(ZMK_MOUSE_DEFAULT_SCRL_VAL)

&soft_off { 
    hold-time-ms = <500>; 
    compatible = "zmk,soft-off-wakeup-sources";
};

&mmv {
    time-to-max-speed-ms = <400>;             /* <--- How long time until max speed is reached (default: 500) */
    delay-ms = <0>;
};

&msc {
    time-to-max-speed-ms = <500>;                 /* <--- How long time until max speed is reached */
};

/ {
    combos {
        compatible = "zmk,combos";

        keymap {
            bindings = <&mo 3>;
            key-positions = <38 39>;
        };

        bt_cfg {
            bindings = <&mo 4>;
            key-positions = <29 25>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp F     &kp P                 &kp B    &kp J  &kp L      &kp U         &kp Y    &kp SEMICOLON  &kp BSPC
&mt LCTRL ESCAPE  &kp A  &kp R  &kp S     &kp T                 &kp G    &kp M  &kp N      &kp E         &kp I    &kp O          &kp SQT
&kp LSHFT         &kp Z  &kp X  &kp C     &kp D                 &kp V    &kp K  &kp H      &kp COMMA     &kp DOT  &kp FSLH       &kp TILDE
                                &kp LGUI  &mt LEFT_SHIFT ENTER  &mo 1    &mo 2  &kp SPACE  &mt RALT DEL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN    &kp HASH   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp STAR       &kp N7        &kp N8        &kp N9        &kp MINUS  &trans
&trans  &kp PERCENT      &kp AMPERSAND  &kp UNDER  &kp LEFT_BRACE        &kp RIGHT_BRACE          &kp EQUAL      &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS   &kp GRAVE
&trans  &kp CARET        &kp DOLLAR     &kp PIPE   &kp LEFT_BRACKET      &kp RIGHT_BRACKET        &kp BACKSLASH  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp N0     &kp TILDE
                                        &trans     &trans                &trans                   &trans         &kp LEFT_WIN  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F11  &kp F1  &kp F2  &kp F3  &kp F4        &kp F5    &kp F6    &kp F7          &kp F8             &kp F9           &kp F10        &kp F12
&trans   &none   &none   &none   &none         &none     &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW       &kp RIGHT        &kp PAGE_UP    &kp HOME
&trans   &none   &none   &none   &none         &none     &none     &kp C_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp PAGE_DOWN  &kp END
                         &trans  &kp LEFT_ALT  &trans    &trans    &trans          &trans
            >;
        };

        util_layer {
            bindings = <
&none  &none   &none   &none   &trans  &trans    &msc SCRL_UP    &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans  &kp BSPC
&none  &none   &none   &none   &none   &none     &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &none
&none  &trans  &trans  &trans  &trans  &none     &trans          &trans          &trans          &trans           &trans  &trans
                       &trans  &trans  &trans    &trans          &trans          &kp RALT
            >;
        };

        power_layer {
            bindings = <
&none       &out OUT_TOG  &out OUT_BLE  &out OUT_USB       &bt BT_CLR_ALL     &soft_off           &none   &none   &none     &none   &trans  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3       &bt BT_SEL 4        &none   &none   &none     &none   &trans  &soft_off
&none       &none         &none         &none              &trans             &none               &trans  &trans  &trans    &trans  &trans  &trans
                                        &ext_power EP_OFF  &ext_power EP_ON   &ext_power EP_TOG    &trans  &trans  &kp RALT
            >;
        };
    };
};
